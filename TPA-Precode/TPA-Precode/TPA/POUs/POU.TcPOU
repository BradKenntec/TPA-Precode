<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.2">
  <POU Name="POU" Id="{52aa0559-33a0-4d96-a025-90b91128d749}" SpecialFunc="None">
    <Declaration><![CDATA[ FUNCTION_BLOCK POU
VAR_INPUT
	go 								:	BOOL;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	//STATES				/////////////////////////////////////////
		BoxRemoved						: BOOL;
		BoxGrabbed						: BOOL;
		BoxRemoverState					: INT;
		BoxReady						: BOOL;
		BoxDropRequest					: BOOL;
		BoxDelivered					: BOOL;
		BoxCartHome						: BOOL;
		BoxLoaderState					: INT;
		FlapFolderState					: INT;
		BoxGraberState					: INT;
		BoxDropped 						: BOOL;
		BoxRemover						: INT :=0;
		BoxStackNeeded					: BOOL;
		BoxRefillState					: INT;
		DryRun							: BOOL;
		p								: BOOL;
		PlixSkip						: BOOL;
		StackReadyToDrop: BOOL;
		SkipStackLoad: BOOL;
		
	//ARDUINO				/////////////////////////////////////////
	
		//INPUTS
	
			PlixSensor1					: BOOL; //sensor
			PlixSensor2					: BOOL; //sensor
			MainStackFull				: BOOL; //sensor
			SecondaryStackFull			: BOOL; //sensor
			LastBoxGone					: BOOL; //sensor
			BoxGrabberUp				: BOOL;//sensor
			BoxGrabberDown				: BOOL;//sensor
			FlapFolder1Up				: BOOL;//Sensor
			FlapFolder1Down				: BOOL;//Sensor
			FlapFolder2Up				: BOOL;//Sensor
			FlapFolder2Down				: BOOL;//Sensor
			CarriageAtPickUp			: BOOL; //sensor
			CarriageAtDrop 				: BOOL;//sensor
					
		//OUTPUTS
			
			
			
	//TIME					/////////////////////////////////////////
		Delay							:TIME := T#2000MS;
		BoxCartTimer					: TON;
		BoxCartHomeTimer					: TON;
		GripperTimer					: TON;
		GripperTime						: TIME := Delay;
		BoxCartTime						: TIME := Delay + T#2000MS;
		FlapResetTimer					: TON;
		FlapResetTime					: TIME := Delay;
		BoxDropTimer					: TON;
		BoxDropTime						: TIME := Delay;
		PlixFlightTimer 				: TON;
		PlixFlightTime 					: TIME := Delay + T#2000MS;
		DownTimer						: TON;
		DownTime	 					: TIME := Delay + Delay;
		GetterTimer						: TON;
		GetterTime	 					: TIME := Delay;
		BoxRemovedTimer					: TON;
		BoxRemovedTime	 				: TIME := Delay + T#2000MS;
		ConveyerTimer					: TON;
		ConveyerTime	 				: TIME := Delay;
	
	
		
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//need the code to decide when the boxes get dropped onto the gripper for a box refil



//need timer for how long boxes have been on cart, make sure theyre stable(maybe a button to say ready
BoxCartTimer(
	IN := GVL.BoxCart = TRUE,
	PT := BoxCartTime,);
BoxCartHomeTimer(
	IN := GVL.BoxCart = FALSE,
	PT := BoxCartTime,);
DownTimer(
	IN := GVL.BoxGrabber = FALSE,
	PT := DownTime,);

FlapResetTimer(//dont need this as we have the sensors 
	IN := FlapFolder1Down = FALSE,
	PT := FlapResetTime,);
	
BoxDropTimer(//boxes dropped onto the graber before its gripped and pulled off
	IN := GVL.TopClamp = TRUE,
	PT := BoxDropTime,);
	
PlixFlightTimer(//time from the head shooting the plix to it landing in a box
	IN := GVL.PlixRequest = FALSE,
	PT := PlixFlightTime,);
	
GripperTimer(//time from the head shooting the plix to it landing in a box
	IN := GVL.BoxGripper =TRUE,
	PT := GripperTime,);
GetterTimer(//time from the head shooting the plix to it landing in a box
	IN := GVL.CarriageWaitRam =FALSE,
	PT := GetterTime,);
	
BoxRemovedTimer(//time from the head shooting the plix to it landing in a box
	IN := GVL.CarriageRam =FALSE,
	PT := BoxRemovedTime,);
	
ConveyerTimer(//time from the head shooting the plix to it landing in a box
	IN := GVL.CarriageWaitRam = TRUE,
	PT := ConveyerTime,);
	
PlixSensor1		 	:= GVL.Sensors.3;//angle one
PlixSensor2 		:= GVL.Sensors.5;
MainStackFull 		:= GVL.Sensors.1;
SecondaryStackFull 	:= GVL.Sensors.0;
LastBoxGone 		:= GVL.Sensors.2;
BoxGrabberUp 		:= GVL.Sensors2.6;
BoxGrabberDown		:= GVL.Sensors.4;


FlapFolder1Up		:= GVL.Sensors2.4;
FlapFolder1Down		:= GVL.Sensors2.5;
FlapFolder2Up 		:= GVL.Sensors2.2;
FlapFolder2Down 	:= GVL.Sensors2.3;
CarriageAtPickUp 	:= GVL.Sensors.6;
CarriageAtDrop 		:= GVL.Sensors.7;
	
IF go THEN
	p := TRUE;
END_IF
	
CASE BoxLoaderState OF
	100: //idle state moves the box cart to the loading position and waits for boxes to be put on
		//GVL.BoxCart := FALSE;
		BoxCartHome := TRUE;//so we know were at the home end of the rams travel
		//GVL.TopClamp := TRUE;
		//GVL.BottomClamp := TRUE;
		BoxLoaderState := 110;
	110:
		IF (NOT LastBoxGone OR NOT MainStackFull) OR SkipStackLoad THEN 
			//GVL.TopClamp := FALSE;
			StackReadyToDrop := TRUE;
			BoxLoaderState := 200;
		ELSIF LastBoxGone AND MainStackFull AND NOT SkipStackLoad THEN
			StackReadyToDrop := FALSE;
			BoxLoaderState := 200;
		END_IF
	200:// if we have boxes in the cart and there are no boxes in the machine and clamp is open we move the stack over
		IF MainStackFull AND (NOT SecondaryStackFull OR DryRun) AND BoxCartHome THEN
			GVL.BoxCart := TRUE;
			GVL.TopClamp := TRUE;
			BoxCartHome := FALSE;
			BoxLoaderState := 300;
		ELSE 
			BoxLoaderState := 100;
		END_IF//move boxes over if no boxes left and stack ready to load.
	
	300:
		IF BoxCartTimer.Q AND SecondaryStackFull THEN//once clamped we remove the cart ready to drop stack 
			GVL.BoxCart := FALSE;
			GVL.TopClamp:=FALSE;
			//TopClamp := TRUE;
			
			BoxLoaderState := 400;
		END_IF
	400:	
		IF BoxCartHomeTimer.Q THEN//once the cart is home we say the stack is ready to be dropped
			BoxCartHome := TRUE;
			StackReadyToDrop := TRUE;
			BoxLoaderState := 500;
		END_IF
	
	
	500:
		
		IF DryRun THEN
			SkipStackLoad := TRUE;
		END_IF
		BoxLoaderState := 100; 
		
END_CASE
CASE FlapFolderState OF
	100: 
		GVL.FlapFolder1 := FALSE;
		GVL.FlapFolder2 := FALSE;
		GVL.BoxGripper := FALSE;
		FlapFolderState := 200;
		
	200:
		IF NOT FlapFolder1Up AND NOT FlapFolder2Up AND CarriageAtPickUp THEN
			GVL.BoxGrabber :=TRUE;
			GVL.BoxGripper :=FALSE;
			FlapFolderState := 210;
		END_IF
	210: 
		IF  StackReadyToDrop AND BoxGrabberUp AND (NOT LastBoxGone OR NOT MainStackFull) THEN //NOT MainStackFull AND //if theres no boxes we say no boxes and wait for that to be sorted
			BoxStackNeeded := TRUE;
			GVL.BottomClamp := TRUE;//drops the boxes on to the gripper
			GVL.TopClamp := TRUE;
			GVL.BoxGripper :=FALSE;//clamp box
			StackReadyToDrop := FALSE;
			FlapFolderState := 400;
		END_IF
	
	400:
		IF BoxDropTimer.Q THEN//after a small timer for drop the stack is gripped again
			GVL.BottomClamp := FALSE;//after timer finnished clamp stakc
			GVL.BoxGripper :=TRUE;//clamp box
			StackReadyToDrop := FALSE;
			FlapFolderState := 450;
		END_IF
	450:
		GVL.BottomClamp := FALSE;//after timer finnished clamp stakc
		FlapFolderState := 500;
		
	500:	//may need a timer here 
		IF GripperTimer.Q THEN
			GVL.BoxGripper :=TRUE;//clamp box
			GVL.BoxGrabber := FALSE;//box in the grabber is pulled off bottom of the stack
			FlapFolderState := 600;
		END_IF
		

	
	600:
		IF (NOT BoxGrabberDown OR DryRun) AND DownTimer.Q THEN
			GVL.FlapFolder1 := TRUE;
			//GVL.PlixRequest := TRUE;//must be set false in plix handler aftr shot
			FlapFolderState := 610;
		END_IF
		
	610:
		IF NOT FlapFolder1Down THEN
			GVL.PlixRequest := TRUE;
			FlapFolderState :=710;
		END_IF
		
	710:
		IF NOT GVL.PlixRequest OR DryRun THEN//////////////////////////////////////dry run needs removing
			//plix has been shot by plix head 
			FlapFolderState := 720;
		END_IF
		
	720:
		//timer to wait a sec for plix to fly
		IF PlixFlightTimer.Q OR DryRun THEN
			FlapFolderState := 730;
		END_IF
	730:
		IF (NOT PlixSensor1 AND PlixSensor2) OR DryRun OR PlixSkip THEN
			GVL.FlapFolder2 := TRUE;
			FlapFolderState := 800;
		END_IF
	800: 
		IF FlapFolder2Down THEN
			//BoxReady := TRUE;
			FlapFolderState := 810;
		END_IF
	810:
		IF FlapResetTimer.Q THEN
			BoxReady := TRUE;
			FlapFolderState := 815;
		END_IF
	815:
		IF BoxGrabbed AND GetterTimer.Q THEN
			GVL.BoxGripper := FALSE;
			FlapFolderState := 820;
		END_IF
	820:
		IF BoxRemoved AND BoxGrabberDown AND BoxRemovedTimer.Q THEN 
			BoxRemoved :=FALSE;
			FlapFolderState := 100;
			
		END_IF
END_CASE




CASE BoxRemoverState OF
	100:
		IF NOT CarriageAtPickUp THEN
			GVL.CarriageRam :=FALSE; //start it going to drop end
			GVL.CarriageWaitRam := FALSE;
			BoxRemoverState := 110;
		ELSE 
			BoxRemoverState := 115;
		END_IF
	110:
		IF BoxRemovedTimer.Q THEN
			BoxRemoverState := 115;
		END_IF
	115:
		IF NOT BoxDropped THEN //if  carrige at pick up when turned on 
			GVL.CarriageRam :=TRUE; //start it going to drop end
			GVL.CarriageWaitRam := TRUE;
			BoxRemoverState := 200;
		END_IF
	
	200:
		IF (NOT CarriageAtPickUp OR DryRun) AND BoxReady THEN
			GVL.CarriageWaitRam :=FALSE;
			BoxRemoverState := 400;
		END_IF
	400: 
		BoxReady := FALSE;
		BoxGrabbed := TRUE;
		BoxRemoverState := 500;
	500:
		IF NOT GVL.BoxGripper THEN
			GVL.CarriageRam := FALSE;
			BoxRemoverState := 550;
		END_IF
		
	550:
		IF CarriageAtPickUp  AND BoxRemovedTimer.Q THEN
			BoxRemoved :=TRUE;
			BoxGrabbed := FALSE;
			BoxRemoverState := 600;
		END_IF
		
	600:
		IF CarriageAtDrop AND BoxDropRequest OR DryRun THEN
			GVL.CarriageWaitRam := TRUE; 
			BoxRemoverState := 700;
		END_IF
	700:  
		IF (BoxDropped OR DryRun) AND ConveyerTimer.Q THEN
			BoxDelivered :=TRUE;
			BoxDropped := FALSE;
			BoxRemoverState := 100;
			
		END_IF
END_CASE

CASE BoxRefillState OF
	100:
		IF BoxStackNeeded THEN
			BoxRefillState := 200;
		END_IF
		
	200:
		IF StackReadyToDrop THEN
			BoxRefillState := 300;
		END_IF
	300:
		
		GVL.TopClamp:= TRUE;
		GVL.BottomClamp:= TRUE;
		BoxRefillState := 400;
	400:
		IF BoxDropTimer.Q THEN
			StackReadyToDrop := FALSE;
			BoxStackNeeded := FALSE;
			GVL.TopClamp:= FALSE;
			GVL.BottomClamp:= FALSE;
			BoxRefillState := 100;	
		END_IF
		
END_CASE]]></ST>
    </Implementation>
    <LineIds Name="POU">
      <LineId Id="69" Count="7" />
      <LineId Id="386" Count="1" />
      <LineId Id="385" Count="0" />
      <LineId Id="373" Count="1" />
      <LineId Id="372" Count="0" />
      <LineId Id="77" Count="11" />
      <LineId Id="406" Count="0" />
      <LineId Id="404" Count="1" />
      <LineId Id="342" Count="0" />
      <LineId Id="483" Count="1" />
      <LineId Id="482" Count="0" />
      <LineId Id="503" Count="0" />
      <LineId Id="505" Count="1" />
      <LineId Id="504" Count="0" />
      <LineId Id="690" Count="0" />
      <LineId Id="692" Count="1" />
      <LineId Id="691" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="343" Count="0" />
      <LineId Id="348" Count="5" />
      <LineId Id="695" Count="0" />
      <LineId Id="694" Count="0" />
      <LineId Id="354" Count="4" />
      <LineId Id="344" Count="1" />
      <LineId Id="360" Count="1" />
      <LineId Id="346" Count="1" />
      <LineId Id="90" Count="3" />
      <LineId Id="364" Count="1" />
      <LineId Id="94" Count="1" />
      <LineId Id="495" Count="0" />
      <LineId Id="507" Count="0" />
      <LineId Id="496" Count="0" />
      <LineId Id="498" Count="1" />
      <LineId Id="687" Count="0" />
      <LineId Id="500" Count="0" />
      <LineId Id="497" Count="0" />
      <LineId Id="96" Count="2" />
      <LineId Id="612" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="101" Count="1" />
      <LineId Id="608" Count="0" />
      <LineId Id="103" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="110" Count="2" />
      <LineId Id="375" Count="0" />
      <LineId Id="113" Count="1" />
      <LineId Id="117" Count="2" />
      <LineId Id="389" Count="0" />
      <LineId Id="395" Count="1" />
      <LineId Id="393" Count="1" />
      <LineId Id="390" Count="2" />
      <LineId Id="120" Count="0" />
      <LineId Id="585" Count="2" />
      <LineId Id="121" Count="0" />
      <LineId Id="123" Count="6" />
      <LineId Id="131" Count="11" />
      <LineId Id="397" Count="0" />
      <LineId Id="409" Count="0" />
      <LineId Id="607" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="159" Count="3" />
      <LineId Id="606" Count="0" />
      <LineId Id="163" Count="1" />
      <LineId Id="412" Count="2" />
      <LineId Id="165" Count="0" />
      <LineId Id="410" Count="0" />
      <LineId Id="398" Count="0" />
      <LineId Id="408" Count="0" />
      <LineId Id="399" Count="0" />
      <LineId Id="401" Count="0" />
      <LineId Id="400" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="411" Count="0" />
      <LineId Id="170" Count="8" />
      <LineId Id="407" Count="0" />
      <LineId Id="179" Count="25" />
      <LineId Id="584" Count="0" />
      <LineId Id="582" Count="1" />
      <LineId Id="205" Count="6" />
      <LineId Id="581" Count="0" />
      <LineId Id="212" Count="0" />
      <LineId Id="580" Count="0" />
      <LineId Id="213" Count="6" />
      <LineId Id="591" Count="0" />
      <LineId Id="595" Count="0" />
      <LineId Id="593" Count="1" />
      <LineId Id="592" Count="0" />
      <LineId Id="604" Count="1" />
      <LineId Id="596" Count="0" />
      <LineId Id="601" Count="2" />
      <LineId Id="600" Count="0" />
      <LineId Id="220" Count="2" />
      <LineId Id="415" Count="0" />
      <LineId Id="223" Count="1" />
      <LineId Id="599" Count="0" />
      <LineId Id="233" Count="13" />
      <LineId Id="488" Count="3" />
      <LineId Id="494" Count="0" />
      <LineId Id="493" Count="0" />
      <LineId Id="492" Count="0" />
      <LineId Id="247" Count="3" />
      <LineId Id="252" Count="4" />
      <LineId Id="697" Count="0" />
      <LineId Id="257" Count="0" />
      <LineId Id="579" Count="0" />
      <LineId Id="258" Count="14" />
      <LineId Id="274" Count="0" />
      <LineId Id="609" Count="0" />
      <LineId Id="275" Count="0" />
      <LineId Id="376" Count="0" />
      <LineId Id="380" Count="0" />
      <LineId Id="383" Count="1" />
      <LineId Id="610" Count="1" />
      <LineId Id="381" Count="1" />
      <LineId Id="378" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>